// Code generated by entc, DO NOT EDIT.

package ent

import (
	"Backend/ent/file"
	"Backend/ent/rom"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// File is the model entity for the File schema.
type File struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Path holds the value of the "path" field.
	Path string `json:"path,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FileQuery when eager-loading is set.
	Edges    FileEdges `json:"edges"`
	file_rom *int
}

// FileEdges holds the relations/edges for other nodes in the graph.
type FileEdges struct {
	// Rom holds the value of the rom edge.
	Rom *Rom `json:"rom,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RomOrErr returns the Rom value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FileEdges) RomOrErr() (*Rom, error) {
	if e.loadedTypes[0] {
		if e.Rom == nil {
			// The edge rom was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: rom.Label}
		}
		return e.Rom, nil
	}
	return nil, &NotLoadedError{edge: "rom"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*File) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case file.FieldID:
			values[i] = new(sql.NullInt64)
		case file.FieldPath:
			values[i] = new(sql.NullString)
		case file.ForeignKeys[0]: // file_rom
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type File", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the File fields.
func (f *File) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case file.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			f.ID = int(value.Int64)
		case file.FieldPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value.Valid {
				f.Path = value.String
			}
		case file.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field file_rom", value)
			} else if value.Valid {
				f.file_rom = new(int)
				*f.file_rom = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryRom queries the "rom" edge of the File entity.
func (f *File) QueryRom() *RomQuery {
	return (&FileClient{config: f.config}).QueryRom(f)
}

// Update returns a builder for updating this File.
// Note that you need to call File.Unwrap() before calling this method if this File
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *File) Update() *FileUpdateOne {
	return (&FileClient{config: f.config}).UpdateOne(f)
}

// Unwrap unwraps the File entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *File) Unwrap() *File {
	tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: File is not a transactional entity")
	}
	f.config.driver = tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *File) String() string {
	var builder strings.Builder
	builder.WriteString("File(")
	builder.WriteString(fmt.Sprintf("id=%v", f.ID))
	builder.WriteString(", path=")
	builder.WriteString(f.Path)
	builder.WriteByte(')')
	return builder.String()
}

// Files is a parsable slice of File.
type Files []*File

func (f Files) config(cfg config) {
	for _i := range f {
		f[_i].config = cfg
	}
}
