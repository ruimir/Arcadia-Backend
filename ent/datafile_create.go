// Code generated by entc, DO NOT EDIT.

package ent

import (
	"Backend/ent/datafile"
	"Backend/ent/game"
	"Backend/ent/header"
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DatafileCreate is the builder for creating a Datafile entity.
type DatafileCreate struct {
	config
	mutation *DatafileMutation
	hooks    []Hook
}

// SetHeaderID sets the "header" edge to the Header entity by ID.
func (dc *DatafileCreate) SetHeaderID(id int) *DatafileCreate {
	dc.mutation.SetHeaderID(id)
	return dc
}

// SetNillableHeaderID sets the "header" edge to the Header entity by ID if the given value is not nil.
func (dc *DatafileCreate) SetNillableHeaderID(id *int) *DatafileCreate {
	if id != nil {
		dc = dc.SetHeaderID(*id)
	}
	return dc
}

// SetHeader sets the "header" edge to the Header entity.
func (dc *DatafileCreate) SetHeader(h *Header) *DatafileCreate {
	return dc.SetHeaderID(h.ID)
}

// AddGameIDs adds the "games" edge to the Game entity by IDs.
func (dc *DatafileCreate) AddGameIDs(ids ...int) *DatafileCreate {
	dc.mutation.AddGameIDs(ids...)
	return dc
}

// AddGames adds the "games" edges to the Game entity.
func (dc *DatafileCreate) AddGames(g ...*Game) *DatafileCreate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return dc.AddGameIDs(ids...)
}

// Mutation returns the DatafileMutation object of the builder.
func (dc *DatafileCreate) Mutation() *DatafileMutation {
	return dc.mutation
}

// Save creates the Datafile in the database.
func (dc *DatafileCreate) Save(ctx context.Context) (*Datafile, error) {
	var (
		err  error
		node *Datafile
	)
	if len(dc.hooks) == 0 {
		if err = dc.check(); err != nil {
			return nil, err
		}
		node, err = dc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DatafileMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dc.check(); err != nil {
				return nil, err
			}
			dc.mutation = mutation
			node, err = dc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dc.hooks) - 1; i >= 0; i-- {
			mut = dc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DatafileCreate) SaveX(ctx context.Context) *Datafile {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (dc *DatafileCreate) check() error {
	return nil
}

func (dc *DatafileCreate) sqlSave(ctx context.Context) (*Datafile, error) {
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (dc *DatafileCreate) createSpec() (*Datafile, *sqlgraph.CreateSpec) {
	var (
		_node = &Datafile{config: dc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: datafile.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: datafile.FieldID,
			},
		}
	)
	if nodes := dc.mutation.HeaderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   datafile.HeaderTable,
			Columns: []string{datafile.HeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: header.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.GamesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   datafile.GamesTable,
			Columns: []string{datafile.GamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: game.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DatafileCreateBulk is the builder for creating many Datafile entities in bulk.
type DatafileCreateBulk struct {
	config
	builders []*DatafileCreate
}

// Save creates the Datafile entities in the database.
func (dcb *DatafileCreateBulk) Save(ctx context.Context) ([]*Datafile, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Datafile, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DatafileMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DatafileCreateBulk) SaveX(ctx context.Context) []*Datafile {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
