// Code generated by entc, DO NOT EDIT.

package ent

import (
	"Backend/ent/datafile"
	"Backend/ent/header"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Header is the model entity for the Header schema.
type Header struct {
	config `json:"-" xml:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty" xml:"name"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Version holds the value of the "version" field.
	Version string `json:"version,omitempty"`
	// Date holds the value of the "date" field.
	Date string `json:"date,omitempty"`
	// Author holds the value of the "author" field.
	Author string `json:"author,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HeaderQuery when eager-loading is set.
	Edges           HeaderEdges `json:"edges"`
	datafile_header *int
}

// HeaderEdges holds the relations/edges for other nodes in the graph.
type HeaderEdges struct {
	// Datafile holds the value of the datafile edge.
	Datafile *Datafile `json:"datafile,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// DatafileOrErr returns the Datafile value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HeaderEdges) DatafileOrErr() (*Datafile, error) {
	if e.loadedTypes[0] {
		if e.Datafile == nil {
			// The edge datafile was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: datafile.Label}
		}
		return e.Datafile, nil
	}
	return nil, &NotLoadedError{edge: "datafile"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Header) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case header.FieldID:
			values[i] = new(sql.NullInt64)
		case header.FieldName, header.FieldDescription, header.FieldVersion, header.FieldDate, header.FieldAuthor, header.FieldURL:
			values[i] = new(sql.NullString)
		case header.ForeignKeys[0]: // datafile_header
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Header", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Header fields.
func (h *Header) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case header.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			h.ID = int(value.Int64)
		case header.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				h.Name = value.String
			}
		case header.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				h.Description = value.String
			}
		case header.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				h.Version = value.String
			}
		case header.FieldDate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				h.Date = value.String
			}
		case header.FieldAuthor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field author", values[i])
			} else if value.Valid {
				h.Author = value.String
			}
		case header.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				h.URL = value.String
			}
		case header.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field datafile_header", value)
			} else if value.Valid {
				h.datafile_header = new(int)
				*h.datafile_header = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryDatafile queries the "datafile" edge of the Header entity.
func (h *Header) QueryDatafile() *DatafileQuery {
	return (&HeaderClient{config: h.config}).QueryDatafile(h)
}

// Update returns a builder for updating this Header.
// Note that you need to call Header.Unwrap() before calling this method if this Header
// was returned from a transaction, and the transaction was committed or rolled back.
func (h *Header) Update() *HeaderUpdateOne {
	return (&HeaderClient{config: h.config}).UpdateOne(h)
}

// Unwrap unwraps the Header entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (h *Header) Unwrap() *Header {
	tx, ok := h.config.driver.(*txDriver)
	if !ok {
		panic("ent: Header is not a transactional entity")
	}
	h.config.driver = tx.drv
	return h
}

// String implements the fmt.Stringer.
func (h *Header) String() string {
	var builder strings.Builder
	builder.WriteString("Header(")
	builder.WriteString(fmt.Sprintf("id=%v", h.ID))
	builder.WriteString(", name=")
	builder.WriteString(h.Name)
	builder.WriteString(", description=")
	builder.WriteString(h.Description)
	builder.WriteString(", version=")
	builder.WriteString(h.Version)
	builder.WriteString(", date=")
	builder.WriteString(h.Date)
	builder.WriteString(", author=")
	builder.WriteString(h.Author)
	builder.WriteString(", url=")
	builder.WriteString(h.URL)
	builder.WriteByte(')')
	return builder.String()
}

// Headers is a parsable slice of Header.
type Headers []*Header

func (h Headers) config(cfg config) {
	for _i := range h {
		h[_i].config = cfg
	}
}
