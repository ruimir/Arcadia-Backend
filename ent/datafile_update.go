// Code generated by entc, DO NOT EDIT.

package ent

import (
	"Backend/ent/datafile"
	"Backend/ent/game"
	"Backend/ent/header"
	"Backend/ent/predicate"
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DatafileUpdate is the builder for updating Datafile entities.
type DatafileUpdate struct {
	config
	hooks    []Hook
	mutation *DatafileMutation
}

// Where adds a new predicate for the DatafileUpdate builder.
func (du *DatafileUpdate) Where(ps ...predicate.Datafile) *DatafileUpdate {
	du.mutation.predicates = append(du.mutation.predicates, ps...)
	return du
}

// SetHeaderID sets the "header" edge to the Header entity by ID.
func (du *DatafileUpdate) SetHeaderID(id int) *DatafileUpdate {
	du.mutation.SetHeaderID(id)
	return du
}

// SetNillableHeaderID sets the "header" edge to the Header entity by ID if the given value is not nil.
func (du *DatafileUpdate) SetNillableHeaderID(id *int) *DatafileUpdate {
	if id != nil {
		du = du.SetHeaderID(*id)
	}
	return du
}

// SetHeader sets the "header" edge to the Header entity.
func (du *DatafileUpdate) SetHeader(h *Header) *DatafileUpdate {
	return du.SetHeaderID(h.ID)
}

// AddGameIDs adds the "games" edge to the Game entity by IDs.
func (du *DatafileUpdate) AddGameIDs(ids ...int) *DatafileUpdate {
	du.mutation.AddGameIDs(ids...)
	return du
}

// AddGames adds the "games" edges to the Game entity.
func (du *DatafileUpdate) AddGames(g ...*Game) *DatafileUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return du.AddGameIDs(ids...)
}

// Mutation returns the DatafileMutation object of the builder.
func (du *DatafileUpdate) Mutation() *DatafileMutation {
	return du.mutation
}

// ClearHeader clears the "header" edge to the Header entity.
func (du *DatafileUpdate) ClearHeader() *DatafileUpdate {
	du.mutation.ClearHeader()
	return du
}

// ClearGames clears all "games" edges to the Game entity.
func (du *DatafileUpdate) ClearGames() *DatafileUpdate {
	du.mutation.ClearGames()
	return du
}

// RemoveGameIDs removes the "games" edge to Game entities by IDs.
func (du *DatafileUpdate) RemoveGameIDs(ids ...int) *DatafileUpdate {
	du.mutation.RemoveGameIDs(ids...)
	return du
}

// RemoveGames removes "games" edges to Game entities.
func (du *DatafileUpdate) RemoveGames(g ...*Game) *DatafileUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return du.RemoveGameIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DatafileUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(du.hooks) == 0 {
		affected, err = du.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DatafileMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			du.mutation = mutation
			affected, err = du.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(du.hooks) - 1; i >= 0; i-- {
			mut = du.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, du.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (du *DatafileUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DatafileUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DatafileUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

func (du *DatafileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   datafile.Table,
			Columns: datafile.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: datafile.FieldID,
			},
		},
	}
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if du.mutation.HeaderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   datafile.HeaderTable,
			Columns: []string{datafile.HeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: header.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.HeaderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   datafile.HeaderTable,
			Columns: []string{datafile.HeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: header.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.GamesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   datafile.GamesTable,
			Columns: []string{datafile.GamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: game.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedGamesIDs(); len(nodes) > 0 && !du.mutation.GamesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   datafile.GamesTable,
			Columns: []string{datafile.GamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: game.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.GamesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   datafile.GamesTable,
			Columns: []string{datafile.GamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: game.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{datafile.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// DatafileUpdateOne is the builder for updating a single Datafile entity.
type DatafileUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DatafileMutation
}

// SetHeaderID sets the "header" edge to the Header entity by ID.
func (duo *DatafileUpdateOne) SetHeaderID(id int) *DatafileUpdateOne {
	duo.mutation.SetHeaderID(id)
	return duo
}

// SetNillableHeaderID sets the "header" edge to the Header entity by ID if the given value is not nil.
func (duo *DatafileUpdateOne) SetNillableHeaderID(id *int) *DatafileUpdateOne {
	if id != nil {
		duo = duo.SetHeaderID(*id)
	}
	return duo
}

// SetHeader sets the "header" edge to the Header entity.
func (duo *DatafileUpdateOne) SetHeader(h *Header) *DatafileUpdateOne {
	return duo.SetHeaderID(h.ID)
}

// AddGameIDs adds the "games" edge to the Game entity by IDs.
func (duo *DatafileUpdateOne) AddGameIDs(ids ...int) *DatafileUpdateOne {
	duo.mutation.AddGameIDs(ids...)
	return duo
}

// AddGames adds the "games" edges to the Game entity.
func (duo *DatafileUpdateOne) AddGames(g ...*Game) *DatafileUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return duo.AddGameIDs(ids...)
}

// Mutation returns the DatafileMutation object of the builder.
func (duo *DatafileUpdateOne) Mutation() *DatafileMutation {
	return duo.mutation
}

// ClearHeader clears the "header" edge to the Header entity.
func (duo *DatafileUpdateOne) ClearHeader() *DatafileUpdateOne {
	duo.mutation.ClearHeader()
	return duo
}

// ClearGames clears all "games" edges to the Game entity.
func (duo *DatafileUpdateOne) ClearGames() *DatafileUpdateOne {
	duo.mutation.ClearGames()
	return duo
}

// RemoveGameIDs removes the "games" edge to Game entities by IDs.
func (duo *DatafileUpdateOne) RemoveGameIDs(ids ...int) *DatafileUpdateOne {
	duo.mutation.RemoveGameIDs(ids...)
	return duo
}

// RemoveGames removes "games" edges to Game entities.
func (duo *DatafileUpdateOne) RemoveGames(g ...*Game) *DatafileUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return duo.RemoveGameIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DatafileUpdateOne) Select(field string, fields ...string) *DatafileUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Datafile entity.
func (duo *DatafileUpdateOne) Save(ctx context.Context) (*Datafile, error) {
	var (
		err  error
		node *Datafile
	)
	if len(duo.hooks) == 0 {
		node, err = duo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DatafileMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			duo.mutation = mutation
			node, err = duo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(duo.hooks) - 1; i >= 0; i-- {
			mut = duo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, duo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DatafileUpdateOne) SaveX(ctx context.Context) *Datafile {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DatafileUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DatafileUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (duo *DatafileUpdateOne) sqlSave(ctx context.Context) (_node *Datafile, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   datafile.Table,
			Columns: datafile.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: datafile.FieldID,
			},
		},
	}
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Datafile.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, datafile.FieldID)
		for _, f := range fields {
			if !datafile.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != datafile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if duo.mutation.HeaderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   datafile.HeaderTable,
			Columns: []string{datafile.HeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: header.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.HeaderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   datafile.HeaderTable,
			Columns: []string{datafile.HeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: header.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.GamesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   datafile.GamesTable,
			Columns: []string{datafile.GamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: game.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedGamesIDs(); len(nodes) > 0 && !duo.mutation.GamesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   datafile.GamesTable,
			Columns: []string{datafile.GamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: game.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.GamesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   datafile.GamesTable,
			Columns: []string{datafile.GamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: game.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Datafile{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{datafile.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
