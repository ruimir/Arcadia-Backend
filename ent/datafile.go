// Code generated by entc, DO NOT EDIT.

package ent

import (
	"Backend/ent/datafile"
	"Backend/ent/header"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Datafile is the model entity for the Datafile schema.
type Datafile struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DatafileQuery when eager-loading is set.
	Edges DatafileEdges `json:"edges"`
}

// DatafileEdges holds the relations/edges for other nodes in the graph.
type DatafileEdges struct {
	// Header holds the value of the header edge.
	Header *Header `json:"header,omitempty" xml:"header"`
	// Games holds the value of the games edge.
	Games []*Game `json:"games,omitempty" xml:"game"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// HeaderOrErr returns the Header value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DatafileEdges) HeaderOrErr() (*Header, error) {
	if e.loadedTypes[0] {
		if e.Header == nil {
			// The edge header was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: header.Label}
		}
		return e.Header, nil
	}
	return nil, &NotLoadedError{edge: "header"}
}

// GamesOrErr returns the Games value or an error if the edge
// was not loaded in eager-loading.
func (e DatafileEdges) GamesOrErr() ([]*Game, error) {
	if e.loadedTypes[1] {
		return e.Games, nil
	}
	return nil, &NotLoadedError{edge: "games"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Datafile) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case datafile.FieldID:
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Datafile", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Datafile fields.
func (d *Datafile) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case datafile.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			d.ID = int(value.Int64)
		}
	}
	return nil
}

// QueryHeader queries the "header" edge of the Datafile entity.
func (d *Datafile) QueryHeader() *HeaderQuery {
	return (&DatafileClient{config: d.config}).QueryHeader(d)
}

// QueryGames queries the "games" edge of the Datafile entity.
func (d *Datafile) QueryGames() *GameQuery {
	return (&DatafileClient{config: d.config}).QueryGames(d)
}

// Update returns a builder for updating this Datafile.
// Note that you need to call Datafile.Unwrap() before calling this method if this Datafile
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Datafile) Update() *DatafileUpdateOne {
	return (&DatafileClient{config: d.config}).UpdateOne(d)
}

// Unwrap unwraps the Datafile entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Datafile) Unwrap() *Datafile {
	tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Datafile is not a transactional entity")
	}
	d.config.driver = tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Datafile) String() string {
	var builder strings.Builder
	builder.WriteString("Datafile(")
	builder.WriteString(fmt.Sprintf("id=%v", d.ID))
	builder.WriteByte(')')
	return builder.String()
}

// Datafiles is a parsable slice of Datafile.
type Datafiles []*Datafile

func (d Datafiles) config(cfg config) {
	for _i := range d {
		d[_i].config = cfg
	}
}
