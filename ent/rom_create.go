// Code generated by entc, DO NOT EDIT.

package ent

import (
	"Backend/ent/game"
	"Backend/ent/rom"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RomCreate is the builder for creating a Rom entity.
type RomCreate struct {
	config
	mutation *RomMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (rc *RomCreate) SetName(s string) *RomCreate {
	rc.mutation.SetName(s)
	return rc
}

// SetSize sets the "size" field.
func (rc *RomCreate) SetSize(s string) *RomCreate {
	rc.mutation.SetSize(s)
	return rc
}

// SetCrc sets the "crc" field.
func (rc *RomCreate) SetCrc(s string) *RomCreate {
	rc.mutation.SetCrc(s)
	return rc
}

// SetMd5 sets the "md5" field.
func (rc *RomCreate) SetMd5(s string) *RomCreate {
	rc.mutation.SetMd5(s)
	return rc
}

// SetSha1 sets the "sha1" field.
func (rc *RomCreate) SetSha1(s string) *RomCreate {
	rc.mutation.SetSha1(s)
	return rc
}

// SetStatus sets the "status" field.
func (rc *RomCreate) SetStatus(s string) *RomCreate {
	rc.mutation.SetStatus(s)
	return rc
}

// SetGameID sets the "game" edge to the Game entity by ID.
func (rc *RomCreate) SetGameID(id int) *RomCreate {
	rc.mutation.SetGameID(id)
	return rc
}

// SetGame sets the "game" edge to the Game entity.
func (rc *RomCreate) SetGame(g *Game) *RomCreate {
	return rc.SetGameID(g.ID)
}

// Mutation returns the RomMutation object of the builder.
func (rc *RomCreate) Mutation() *RomMutation {
	return rc.mutation
}

// Save creates the Rom in the database.
func (rc *RomCreate) Save(ctx context.Context) (*Rom, error) {
	var (
		err  error
		node *Rom
	)
	if len(rc.hooks) == 0 {
		if err = rc.check(); err != nil {
			return nil, err
		}
		node, err = rc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RomMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rc.check(); err != nil {
				return nil, err
			}
			rc.mutation = mutation
			node, err = rc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rc.hooks) - 1; i >= 0; i-- {
			mut = rc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RomCreate) SaveX(ctx context.Context) *Rom {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (rc *RomCreate) check() error {
	if _, ok := rc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if _, ok := rc.mutation.Size(); !ok {
		return &ValidationError{Name: "size", err: errors.New("ent: missing required field \"size\"")}
	}
	if _, ok := rc.mutation.Crc(); !ok {
		return &ValidationError{Name: "crc", err: errors.New("ent: missing required field \"crc\"")}
	}
	if _, ok := rc.mutation.Md5(); !ok {
		return &ValidationError{Name: "md5", err: errors.New("ent: missing required field \"md5\"")}
	}
	if _, ok := rc.mutation.Sha1(); !ok {
		return &ValidationError{Name: "sha1", err: errors.New("ent: missing required field \"sha1\"")}
	}
	if _, ok := rc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New("ent: missing required field \"status\"")}
	}
	if _, ok := rc.mutation.GameID(); !ok {
		return &ValidationError{Name: "game", err: errors.New("ent: missing required edge \"game\"")}
	}
	return nil
}

func (rc *RomCreate) sqlSave(ctx context.Context) (*Rom, error) {
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (rc *RomCreate) createSpec() (*Rom, *sqlgraph.CreateSpec) {
	var (
		_node = &Rom{config: rc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: rom.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: rom.FieldID,
			},
		}
	)
	if value, ok := rc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rom.FieldName,
		})
		_node.Name = value
	}
	if value, ok := rc.mutation.Size(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rom.FieldSize,
		})
		_node.Size = value
	}
	if value, ok := rc.mutation.Crc(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rom.FieldCrc,
		})
		_node.Crc = value
	}
	if value, ok := rc.mutation.Md5(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rom.FieldMd5,
		})
		_node.Md5 = value
	}
	if value, ok := rc.mutation.Sha1(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rom.FieldSha1,
		})
		_node.Sha1 = value
	}
	if value, ok := rc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rom.FieldStatus,
		})
		_node.Status = value
	}
	if nodes := rc.mutation.GameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   rom.GameTable,
			Columns: []string{rom.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: game.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.game_rom = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RomCreateBulk is the builder for creating many Rom entities in bulk.
type RomCreateBulk struct {
	config
	builders []*RomCreate
}

// Save creates the Rom entities in the database.
func (rcb *RomCreateBulk) Save(ctx context.Context) ([]*Rom, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Rom, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RomMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RomCreateBulk) SaveX(ctx context.Context) []*Rom {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
