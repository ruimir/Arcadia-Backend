// Code generated by entc, DO NOT EDIT.

package rom

import (
	"Backend/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Size applies equality check predicate on the "size" field. It's identical to SizeEQ.
func Size(v string) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSize), v))
	})
}

// Crc applies equality check predicate on the "crc" field. It's identical to CrcEQ.
func Crc(v string) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCrc), v))
	})
}

// Md5 applies equality check predicate on the "md5" field. It's identical to Md5EQ.
func Md5(v string) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMd5), v))
	})
}

// Sha1 applies equality check predicate on the "sha1" field. It's identical to Sha1EQ.
func Sha1(v string) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSha1), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Rom {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rom(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Rom {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rom(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// SizeEQ applies the EQ predicate on the "size" field.
func SizeEQ(v string) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSize), v))
	})
}

// SizeNEQ applies the NEQ predicate on the "size" field.
func SizeNEQ(v string) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSize), v))
	})
}

// SizeIn applies the In predicate on the "size" field.
func SizeIn(vs ...string) predicate.Rom {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rom(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSize), v...))
	})
}

// SizeNotIn applies the NotIn predicate on the "size" field.
func SizeNotIn(vs ...string) predicate.Rom {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rom(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSize), v...))
	})
}

// SizeGT applies the GT predicate on the "size" field.
func SizeGT(v string) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSize), v))
	})
}

// SizeGTE applies the GTE predicate on the "size" field.
func SizeGTE(v string) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSize), v))
	})
}

// SizeLT applies the LT predicate on the "size" field.
func SizeLT(v string) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSize), v))
	})
}

// SizeLTE applies the LTE predicate on the "size" field.
func SizeLTE(v string) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSize), v))
	})
}

// SizeContains applies the Contains predicate on the "size" field.
func SizeContains(v string) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSize), v))
	})
}

// SizeHasPrefix applies the HasPrefix predicate on the "size" field.
func SizeHasPrefix(v string) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSize), v))
	})
}

// SizeHasSuffix applies the HasSuffix predicate on the "size" field.
func SizeHasSuffix(v string) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSize), v))
	})
}

// SizeEqualFold applies the EqualFold predicate on the "size" field.
func SizeEqualFold(v string) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSize), v))
	})
}

// SizeContainsFold applies the ContainsFold predicate on the "size" field.
func SizeContainsFold(v string) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSize), v))
	})
}

// CrcEQ applies the EQ predicate on the "crc" field.
func CrcEQ(v string) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCrc), v))
	})
}

// CrcNEQ applies the NEQ predicate on the "crc" field.
func CrcNEQ(v string) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCrc), v))
	})
}

// CrcIn applies the In predicate on the "crc" field.
func CrcIn(vs ...string) predicate.Rom {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rom(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCrc), v...))
	})
}

// CrcNotIn applies the NotIn predicate on the "crc" field.
func CrcNotIn(vs ...string) predicate.Rom {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rom(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCrc), v...))
	})
}

// CrcGT applies the GT predicate on the "crc" field.
func CrcGT(v string) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCrc), v))
	})
}

// CrcGTE applies the GTE predicate on the "crc" field.
func CrcGTE(v string) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCrc), v))
	})
}

// CrcLT applies the LT predicate on the "crc" field.
func CrcLT(v string) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCrc), v))
	})
}

// CrcLTE applies the LTE predicate on the "crc" field.
func CrcLTE(v string) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCrc), v))
	})
}

// CrcContains applies the Contains predicate on the "crc" field.
func CrcContains(v string) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCrc), v))
	})
}

// CrcHasPrefix applies the HasPrefix predicate on the "crc" field.
func CrcHasPrefix(v string) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCrc), v))
	})
}

// CrcHasSuffix applies the HasSuffix predicate on the "crc" field.
func CrcHasSuffix(v string) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCrc), v))
	})
}

// CrcEqualFold applies the EqualFold predicate on the "crc" field.
func CrcEqualFold(v string) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCrc), v))
	})
}

// CrcContainsFold applies the ContainsFold predicate on the "crc" field.
func CrcContainsFold(v string) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCrc), v))
	})
}

// Md5EQ applies the EQ predicate on the "md5" field.
func Md5EQ(v string) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMd5), v))
	})
}

// Md5NEQ applies the NEQ predicate on the "md5" field.
func Md5NEQ(v string) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMd5), v))
	})
}

// Md5In applies the In predicate on the "md5" field.
func Md5In(vs ...string) predicate.Rom {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rom(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMd5), v...))
	})
}

// Md5NotIn applies the NotIn predicate on the "md5" field.
func Md5NotIn(vs ...string) predicate.Rom {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rom(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMd5), v...))
	})
}

// Md5GT applies the GT predicate on the "md5" field.
func Md5GT(v string) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMd5), v))
	})
}

// Md5GTE applies the GTE predicate on the "md5" field.
func Md5GTE(v string) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMd5), v))
	})
}

// Md5LT applies the LT predicate on the "md5" field.
func Md5LT(v string) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMd5), v))
	})
}

// Md5LTE applies the LTE predicate on the "md5" field.
func Md5LTE(v string) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMd5), v))
	})
}

// Md5Contains applies the Contains predicate on the "md5" field.
func Md5Contains(v string) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMd5), v))
	})
}

// Md5HasPrefix applies the HasPrefix predicate on the "md5" field.
func Md5HasPrefix(v string) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMd5), v))
	})
}

// Md5HasSuffix applies the HasSuffix predicate on the "md5" field.
func Md5HasSuffix(v string) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMd5), v))
	})
}

// Md5EqualFold applies the EqualFold predicate on the "md5" field.
func Md5EqualFold(v string) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMd5), v))
	})
}

// Md5ContainsFold applies the ContainsFold predicate on the "md5" field.
func Md5ContainsFold(v string) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMd5), v))
	})
}

// Sha1EQ applies the EQ predicate on the "sha1" field.
func Sha1EQ(v string) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSha1), v))
	})
}

// Sha1NEQ applies the NEQ predicate on the "sha1" field.
func Sha1NEQ(v string) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSha1), v))
	})
}

// Sha1In applies the In predicate on the "sha1" field.
func Sha1In(vs ...string) predicate.Rom {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rom(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSha1), v...))
	})
}

// Sha1NotIn applies the NotIn predicate on the "sha1" field.
func Sha1NotIn(vs ...string) predicate.Rom {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rom(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSha1), v...))
	})
}

// Sha1GT applies the GT predicate on the "sha1" field.
func Sha1GT(v string) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSha1), v))
	})
}

// Sha1GTE applies the GTE predicate on the "sha1" field.
func Sha1GTE(v string) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSha1), v))
	})
}

// Sha1LT applies the LT predicate on the "sha1" field.
func Sha1LT(v string) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSha1), v))
	})
}

// Sha1LTE applies the LTE predicate on the "sha1" field.
func Sha1LTE(v string) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSha1), v))
	})
}

// Sha1Contains applies the Contains predicate on the "sha1" field.
func Sha1Contains(v string) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSha1), v))
	})
}

// Sha1HasPrefix applies the HasPrefix predicate on the "sha1" field.
func Sha1HasPrefix(v string) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSha1), v))
	})
}

// Sha1HasSuffix applies the HasSuffix predicate on the "sha1" field.
func Sha1HasSuffix(v string) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSha1), v))
	})
}

// Sha1EqualFold applies the EqualFold predicate on the "sha1" field.
func Sha1EqualFold(v string) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSha1), v))
	})
}

// Sha1ContainsFold applies the ContainsFold predicate on the "sha1" field.
func Sha1ContainsFold(v string) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSha1), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.Rom {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rom(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.Rom {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rom(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStatus), v))
	})
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStatus), v))
	})
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStatus), v))
	})
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStatus), v))
	})
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStatus), v))
	})
}

// HasGame applies the HasEdge predicate on the "game" edge.
func HasGame() predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(GameTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, GameTable, GameColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGameWith applies the HasEdge predicate on the "game" edge with a given conditions (other predicates).
func HasGameWith(preds ...predicate.Game) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(GameInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, GameTable, GameColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Rom) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Rom) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Rom) predicate.Rom {
	return predicate.Rom(func(s *sql.Selector) {
		p(s.Not())
	})
}
