// Code generated by entc, DO NOT EDIT.

package ent

import (
	"Backend/ent/game"
	"Backend/ent/rom"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Rom is the model entity for the Rom schema.
type Rom struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Size holds the value of the "size" field.
	Size string `json:"size,omitempty"`
	// Crc holds the value of the "crc" field.
	Crc string `json:"crc,omitempty"`
	// Md5 holds the value of the "md5" field.
	Md5 string `json:"md5,omitempty"`
	// Sha1 holds the value of the "sha1" field.
	Sha1 string `json:"sha1,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RomQuery when eager-loading is set.
	Edges    RomEdges `json:"edges"`
	game_rom *int
}

// RomEdges holds the relations/edges for other nodes in the graph.
type RomEdges struct {
	// Game holds the value of the game edge.
	Game *Game `json:"game,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// GameOrErr returns the Game value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RomEdges) GameOrErr() (*Game, error) {
	if e.loadedTypes[0] {
		if e.Game == nil {
			// The edge game was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: game.Label}
		}
		return e.Game, nil
	}
	return nil, &NotLoadedError{edge: "game"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Rom) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case rom.FieldID:
			values[i] = new(sql.NullInt64)
		case rom.FieldName, rom.FieldSize, rom.FieldCrc, rom.FieldMd5, rom.FieldSha1, rom.FieldStatus:
			values[i] = new(sql.NullString)
		case rom.ForeignKeys[0]: // game_rom
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Rom", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Rom fields.
func (r *Rom) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case rom.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int(value.Int64)
		case rom.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				r.Name = value.String
			}
		case rom.FieldSize:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field size", values[i])
			} else if value.Valid {
				r.Size = value.String
			}
		case rom.FieldCrc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field crc", values[i])
			} else if value.Valid {
				r.Crc = value.String
			}
		case rom.FieldMd5:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field md5", values[i])
			} else if value.Valid {
				r.Md5 = value.String
			}
		case rom.FieldSha1:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sha1", values[i])
			} else if value.Valid {
				r.Sha1 = value.String
			}
		case rom.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				r.Status = value.String
			}
		case rom.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field game_rom", value)
			} else if value.Valid {
				r.game_rom = new(int)
				*r.game_rom = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryGame queries the "game" edge of the Rom entity.
func (r *Rom) QueryGame() *GameQuery {
	return (&RomClient{config: r.config}).QueryGame(r)
}

// Update returns a builder for updating this Rom.
// Note that you need to call Rom.Unwrap() before calling this method if this Rom
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Rom) Update() *RomUpdateOne {
	return (&RomClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the Rom entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Rom) Unwrap() *Rom {
	tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Rom is not a transactional entity")
	}
	r.config.driver = tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Rom) String() string {
	var builder strings.Builder
	builder.WriteString("Rom(")
	builder.WriteString(fmt.Sprintf("id=%v", r.ID))
	builder.WriteString(", name=")
	builder.WriteString(r.Name)
	builder.WriteString(", size=")
	builder.WriteString(r.Size)
	builder.WriteString(", crc=")
	builder.WriteString(r.Crc)
	builder.WriteString(", md5=")
	builder.WriteString(r.Md5)
	builder.WriteString(", sha1=")
	builder.WriteString(r.Sha1)
	builder.WriteString(", status=")
	builder.WriteString(r.Status)
	builder.WriteByte(')')
	return builder.String()
}

// Roms is a parsable slice of Rom.
type Roms []*Rom

func (r Roms) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
