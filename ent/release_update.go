// Code generated by entc, DO NOT EDIT.

package ent

import (
	"Backend/ent/game"
	"Backend/ent/predicate"
	"Backend/ent/release"
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ReleaseUpdate is the builder for updating Release entities.
type ReleaseUpdate struct {
	config
	hooks    []Hook
	mutation *ReleaseMutation
}

// Where adds a new predicate for the ReleaseUpdate builder.
func (ru *ReleaseUpdate) Where(ps ...predicate.Release) *ReleaseUpdate {
	ru.mutation.predicates = append(ru.mutation.predicates, ps...)
	return ru
}

// SetName sets the "name" field.
func (ru *ReleaseUpdate) SetName(s string) *ReleaseUpdate {
	ru.mutation.SetName(s)
	return ru
}

// SetRegion sets the "region" field.
func (ru *ReleaseUpdate) SetRegion(s string) *ReleaseUpdate {
	ru.mutation.SetRegion(s)
	return ru
}

// SetGameID sets the "game" edge to the Game entity by ID.
func (ru *ReleaseUpdate) SetGameID(id int) *ReleaseUpdate {
	ru.mutation.SetGameID(id)
	return ru
}

// SetNillableGameID sets the "game" edge to the Game entity by ID if the given value is not nil.
func (ru *ReleaseUpdate) SetNillableGameID(id *int) *ReleaseUpdate {
	if id != nil {
		ru = ru.SetGameID(*id)
	}
	return ru
}

// SetGame sets the "game" edge to the Game entity.
func (ru *ReleaseUpdate) SetGame(g *Game) *ReleaseUpdate {
	return ru.SetGameID(g.ID)
}

// Mutation returns the ReleaseMutation object of the builder.
func (ru *ReleaseUpdate) Mutation() *ReleaseMutation {
	return ru.mutation
}

// ClearGame clears the "game" edge to the Game entity.
func (ru *ReleaseUpdate) ClearGame() *ReleaseUpdate {
	ru.mutation.ClearGame()
	return ru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *ReleaseUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ru.hooks) == 0 {
		affected, err = ru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReleaseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ru.mutation = mutation
			affected, err = ru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ru.hooks) - 1; i >= 0; i-- {
			mut = ru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ru *ReleaseUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *ReleaseUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *ReleaseUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ru *ReleaseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   release.Table,
			Columns: release.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: release.FieldID,
			},
		},
	}
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: release.FieldName,
		})
	}
	if value, ok := ru.mutation.Region(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: release.FieldRegion,
		})
	}
	if ru.mutation.GameCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   release.GameTable,
			Columns: []string{release.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: game.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.GameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   release.GameTable,
			Columns: []string{release.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: game.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{release.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ReleaseUpdateOne is the builder for updating a single Release entity.
type ReleaseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ReleaseMutation
}

// SetName sets the "name" field.
func (ruo *ReleaseUpdateOne) SetName(s string) *ReleaseUpdateOne {
	ruo.mutation.SetName(s)
	return ruo
}

// SetRegion sets the "region" field.
func (ruo *ReleaseUpdateOne) SetRegion(s string) *ReleaseUpdateOne {
	ruo.mutation.SetRegion(s)
	return ruo
}

// SetGameID sets the "game" edge to the Game entity by ID.
func (ruo *ReleaseUpdateOne) SetGameID(id int) *ReleaseUpdateOne {
	ruo.mutation.SetGameID(id)
	return ruo
}

// SetNillableGameID sets the "game" edge to the Game entity by ID if the given value is not nil.
func (ruo *ReleaseUpdateOne) SetNillableGameID(id *int) *ReleaseUpdateOne {
	if id != nil {
		ruo = ruo.SetGameID(*id)
	}
	return ruo
}

// SetGame sets the "game" edge to the Game entity.
func (ruo *ReleaseUpdateOne) SetGame(g *Game) *ReleaseUpdateOne {
	return ruo.SetGameID(g.ID)
}

// Mutation returns the ReleaseMutation object of the builder.
func (ruo *ReleaseUpdateOne) Mutation() *ReleaseMutation {
	return ruo.mutation
}

// ClearGame clears the "game" edge to the Game entity.
func (ruo *ReleaseUpdateOne) ClearGame() *ReleaseUpdateOne {
	ruo.mutation.ClearGame()
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *ReleaseUpdateOne) Select(field string, fields ...string) *ReleaseUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Release entity.
func (ruo *ReleaseUpdateOne) Save(ctx context.Context) (*Release, error) {
	var (
		err  error
		node *Release
	)
	if len(ruo.hooks) == 0 {
		node, err = ruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReleaseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ruo.mutation = mutation
			node, err = ruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruo.hooks) - 1; i >= 0; i-- {
			mut = ruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *ReleaseUpdateOne) SaveX(ctx context.Context) *Release {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *ReleaseUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *ReleaseUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ruo *ReleaseUpdateOne) sqlSave(ctx context.Context) (_node *Release, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   release.Table,
			Columns: release.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: release.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Release.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, release.FieldID)
		for _, f := range fields {
			if !release.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != release.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: release.FieldName,
		})
	}
	if value, ok := ruo.mutation.Region(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: release.FieldRegion,
		})
	}
	if ruo.mutation.GameCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   release.GameTable,
			Columns: []string{release.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: game.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.GameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   release.GameTable,
			Columns: []string{release.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: game.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Release{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{release.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
