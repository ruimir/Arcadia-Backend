// Code generated by entc, DO NOT EDIT.

package ent

import (
	"Backend/ent/datafile"
	"Backend/ent/header"
	"Backend/ent/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HeaderUpdate is the builder for updating Header entities.
type HeaderUpdate struct {
	config
	hooks    []Hook
	mutation *HeaderMutation
}

// Where adds a new predicate for the HeaderUpdate builder.
func (hu *HeaderUpdate) Where(ps ...predicate.Header) *HeaderUpdate {
	hu.mutation.predicates = append(hu.mutation.predicates, ps...)
	return hu
}

// SetName sets the "name" field.
func (hu *HeaderUpdate) SetName(s string) *HeaderUpdate {
	hu.mutation.SetName(s)
	return hu
}

// SetDescription sets the "description" field.
func (hu *HeaderUpdate) SetDescription(s string) *HeaderUpdate {
	hu.mutation.SetDescription(s)
	return hu
}

// SetVersion sets the "version" field.
func (hu *HeaderUpdate) SetVersion(s string) *HeaderUpdate {
	hu.mutation.SetVersion(s)
	return hu
}

// SetDate sets the "date" field.
func (hu *HeaderUpdate) SetDate(s string) *HeaderUpdate {
	hu.mutation.SetDate(s)
	return hu
}

// SetAuthor sets the "author" field.
func (hu *HeaderUpdate) SetAuthor(s string) *HeaderUpdate {
	hu.mutation.SetAuthor(s)
	return hu
}

// SetURL sets the "url" field.
func (hu *HeaderUpdate) SetURL(s string) *HeaderUpdate {
	hu.mutation.SetURL(s)
	return hu
}

// SetDatafileID sets the "datafile" edge to the Datafile entity by ID.
func (hu *HeaderUpdate) SetDatafileID(id int) *HeaderUpdate {
	hu.mutation.SetDatafileID(id)
	return hu
}

// SetDatafile sets the "datafile" edge to the Datafile entity.
func (hu *HeaderUpdate) SetDatafile(d *Datafile) *HeaderUpdate {
	return hu.SetDatafileID(d.ID)
}

// Mutation returns the HeaderMutation object of the builder.
func (hu *HeaderUpdate) Mutation() *HeaderMutation {
	return hu.mutation
}

// ClearDatafile clears the "datafile" edge to the Datafile entity.
func (hu *HeaderUpdate) ClearDatafile() *HeaderUpdate {
	hu.mutation.ClearDatafile()
	return hu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hu *HeaderUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(hu.hooks) == 0 {
		if err = hu.check(); err != nil {
			return 0, err
		}
		affected, err = hu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*HeaderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = hu.check(); err != nil {
				return 0, err
			}
			hu.mutation = mutation
			affected, err = hu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(hu.hooks) - 1; i >= 0; i-- {
			mut = hu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, hu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (hu *HeaderUpdate) SaveX(ctx context.Context) int {
	affected, err := hu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hu *HeaderUpdate) Exec(ctx context.Context) error {
	_, err := hu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hu *HeaderUpdate) ExecX(ctx context.Context) {
	if err := hu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hu *HeaderUpdate) check() error {
	if _, ok := hu.mutation.DatafileID(); hu.mutation.DatafileCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"datafile\"")
	}
	return nil
}

func (hu *HeaderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   header.Table,
			Columns: header.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: header.FieldID,
			},
		},
	}
	if ps := hu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: header.FieldName,
		})
	}
	if value, ok := hu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: header.FieldDescription,
		})
	}
	if value, ok := hu.mutation.Version(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: header.FieldVersion,
		})
	}
	if value, ok := hu.mutation.Date(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: header.FieldDate,
		})
	}
	if value, ok := hu.mutation.Author(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: header.FieldAuthor,
		})
	}
	if value, ok := hu.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: header.FieldURL,
		})
	}
	if hu.mutation.DatafileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   header.DatafileTable,
			Columns: []string{header.DatafileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: datafile.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.DatafileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   header.DatafileTable,
			Columns: []string{header.DatafileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: datafile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{header.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// HeaderUpdateOne is the builder for updating a single Header entity.
type HeaderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HeaderMutation
}

// SetName sets the "name" field.
func (huo *HeaderUpdateOne) SetName(s string) *HeaderUpdateOne {
	huo.mutation.SetName(s)
	return huo
}

// SetDescription sets the "description" field.
func (huo *HeaderUpdateOne) SetDescription(s string) *HeaderUpdateOne {
	huo.mutation.SetDescription(s)
	return huo
}

// SetVersion sets the "version" field.
func (huo *HeaderUpdateOne) SetVersion(s string) *HeaderUpdateOne {
	huo.mutation.SetVersion(s)
	return huo
}

// SetDate sets the "date" field.
func (huo *HeaderUpdateOne) SetDate(s string) *HeaderUpdateOne {
	huo.mutation.SetDate(s)
	return huo
}

// SetAuthor sets the "author" field.
func (huo *HeaderUpdateOne) SetAuthor(s string) *HeaderUpdateOne {
	huo.mutation.SetAuthor(s)
	return huo
}

// SetURL sets the "url" field.
func (huo *HeaderUpdateOne) SetURL(s string) *HeaderUpdateOne {
	huo.mutation.SetURL(s)
	return huo
}

// SetDatafileID sets the "datafile" edge to the Datafile entity by ID.
func (huo *HeaderUpdateOne) SetDatafileID(id int) *HeaderUpdateOne {
	huo.mutation.SetDatafileID(id)
	return huo
}

// SetDatafile sets the "datafile" edge to the Datafile entity.
func (huo *HeaderUpdateOne) SetDatafile(d *Datafile) *HeaderUpdateOne {
	return huo.SetDatafileID(d.ID)
}

// Mutation returns the HeaderMutation object of the builder.
func (huo *HeaderUpdateOne) Mutation() *HeaderMutation {
	return huo.mutation
}

// ClearDatafile clears the "datafile" edge to the Datafile entity.
func (huo *HeaderUpdateOne) ClearDatafile() *HeaderUpdateOne {
	huo.mutation.ClearDatafile()
	return huo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (huo *HeaderUpdateOne) Select(field string, fields ...string) *HeaderUpdateOne {
	huo.fields = append([]string{field}, fields...)
	return huo
}

// Save executes the query and returns the updated Header entity.
func (huo *HeaderUpdateOne) Save(ctx context.Context) (*Header, error) {
	var (
		err  error
		node *Header
	)
	if len(huo.hooks) == 0 {
		if err = huo.check(); err != nil {
			return nil, err
		}
		node, err = huo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*HeaderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = huo.check(); err != nil {
				return nil, err
			}
			huo.mutation = mutation
			node, err = huo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(huo.hooks) - 1; i >= 0; i-- {
			mut = huo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, huo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (huo *HeaderUpdateOne) SaveX(ctx context.Context) *Header {
	node, err := huo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (huo *HeaderUpdateOne) Exec(ctx context.Context) error {
	_, err := huo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (huo *HeaderUpdateOne) ExecX(ctx context.Context) {
	if err := huo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (huo *HeaderUpdateOne) check() error {
	if _, ok := huo.mutation.DatafileID(); huo.mutation.DatafileCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"datafile\"")
	}
	return nil
}

func (huo *HeaderUpdateOne) sqlSave(ctx context.Context) (_node *Header, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   header.Table,
			Columns: header.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: header.FieldID,
			},
		},
	}
	id, ok := huo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Header.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := huo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, header.FieldID)
		for _, f := range fields {
			if !header.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != header.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := huo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := huo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: header.FieldName,
		})
	}
	if value, ok := huo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: header.FieldDescription,
		})
	}
	if value, ok := huo.mutation.Version(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: header.FieldVersion,
		})
	}
	if value, ok := huo.mutation.Date(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: header.FieldDate,
		})
	}
	if value, ok := huo.mutation.Author(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: header.FieldAuthor,
		})
	}
	if value, ok := huo.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: header.FieldURL,
		})
	}
	if huo.mutation.DatafileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   header.DatafileTable,
			Columns: []string{header.DatafileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: datafile.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.DatafileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   header.DatafileTable,
			Columns: []string{header.DatafileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: datafile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Header{config: huo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, huo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{header.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
