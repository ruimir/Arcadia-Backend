// Code generated by entc, DO NOT EDIT.

package header

const (
	// Label holds the string label denoting the header type in the database.
	Label = "header"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldDate holds the string denoting the date field in the database.
	FieldDate = "date"
	// FieldAuthor holds the string denoting the author field in the database.
	FieldAuthor = "author"
	// FieldURL holds the string denoting the url field in the database.
	FieldURL = "url"
	// EdgeDatafile holds the string denoting the datafile edge name in mutations.
	EdgeDatafile = "datafile"
	// Table holds the table name of the header in the database.
	Table = "headers"
	// DatafileTable is the table the holds the datafile relation/edge.
	DatafileTable = "headers"
	// DatafileInverseTable is the table name for the Datafile entity.
	// It exists in this package in order to avoid circular dependency with the "datafile" package.
	DatafileInverseTable = "datafiles"
	// DatafileColumn is the table column denoting the datafile relation/edge.
	DatafileColumn = "datafile_header"
)

// Columns holds all SQL columns for header fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDescription,
	FieldVersion,
	FieldDate,
	FieldAuthor,
	FieldURL,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "headers"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"datafile_header",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
